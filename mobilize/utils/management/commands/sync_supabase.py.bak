"""
Management command to synchronize data between Django models and Supabase.

This command provides a CLI interface for the SupabaseSync utility.
"""

import logging
from django.core.management.base import BaseCommand, CommandError
from django.core.management import call_command
from django.db import connection
from mobilize.churches.models import Church
from mobilize.contacts.models import Contact, Person
from mobilize.utils.supabase_client import supabase
from mobilize.utils.supabase_sync import SupabaseSync

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = 'Synchronize data between Django models and Supabase'
    
    @classmethod
    def run_from_scheduler(cls, *args):
        """
        Class method to run the command from a scheduler (e.g., cron job).
        This method is called by django-crontab.
        
        Args:
            *args: Command line arguments as they would be passed to the management command.
        """
        try:
            # Convert args to the format expected by call_command
            options = {}
            for arg in args:
                if arg.startswith('--'):
                    parts = arg.lstrip('-').split('=', 1)
                    key = parts[0].replace('-', '_')
                    if len(parts) > 1:
                        options[key] = parts[1]
                    else:
                        options[key] = True
            
            # Add verbose flag for better logging
            options['verbosity'] = 2
            
            # Call the command
            logger.info(f"Running sync_supabase scheduled task with options: {options}")
            call_command('sync_supabase', **options)
            logger.info("Scheduled sync_supabase task completed successfully")
            return 0
        except Exception as e:
            logger.error(f"Error in scheduled sync_supabase task: {str(e)}")
            return 1

    def add_arguments(self, parser):
        parser.add_argument(
            '--direction',
            choices=['to_supabase', 'from_supabase', 'both'],
            default='both',
            help='Direction of synchronization (default: both)'
        )
        parser.add_argument(
            '--model',
            choices=['contact', 'person', 'church', 'all'],
            default='all',
            help='Model to synchronize (default: all)'
        )
        parser.add_argument(
            '--conflict-strategy',
            choices=['django', 'supabase', 'skip'],
            default='django',
            help='Strategy for resolving conflicts (default: django)'
        )
        parser.add_argument(
            '--limit',
            type=int,
            default=None,
            help='Limit the number of records to synchronize'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Perform a dry run without making any changes'
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Show detailed output'
        )

    def handle(self, *args, **options):
        """Execute the command."""
        direction = options['direction']
        model_name = options['model']
        conflict_strategy = options['conflict_strategy']
        limit = options['limit']
        dry_run = options['dry_run']
        verbose = options['verbose']

        # Set up logging
        if verbose:
            logger.setLevel(logging.DEBUG)
        else:
            logger.setLevel(logging.INFO)

        # Get the models to synchronize
        models_to_sync = self._get_models_to_sync(model_name)

        # Show command parameters
        self.stdout.write(self.style.SUCCESS("Starting synchronization with parameters:"))
        self.stdout.write(f"  Direction: {direction}")
        self.stdout.write(f"  Models: {', '.join([m.__name__ for m in models_to_sync])}")
        self.stdout.write(f"  Conflict strategy: {conflict_strategy}")
        self.stdout.write(f"  Limit: {limit if limit else 'No limit'}")
        self.stdout.write(f"  Dry run: {'Yes' if dry_run else 'No'}")
        self.stdout.write("")

        # Perform the synchronization
        for model in models_to_sync:
            self._sync_model(model, direction, conflict_strategy, limit, dry_run)

        self.stdout.write(self.style.SUCCESS("Synchronization completed successfully"))

    def _get_models_to_sync(self, model_name):
        """Get the models to synchronize based on the model name."""
        if model_name == 'all':
            return [Person, Church]
        elif model_name == 'contact':
            # Contact is an abstract base model, so we sync its concrete subclasses
            self.stdout.write(self.style.WARNING("Contact is an abstract model, syncing Person and Church instead"))
            return [Person, Church]
        elif model_name == 'person':
            return [Person]
        elif model_name == 'church':
            return [Church]
        else:
            raise CommandError(f"Unknown model: {model_name}")

    def _sync_model(self, model, direction, conflict_strategy, limit, dry_run):
        """Synchronize a model in the specified direction."""
        model_name = model.__name__
        self.stdout.write(self.style.NOTICE(f"Synchronizing {model_name}..."))

        if direction in ['to_supabase', 'both']:
            self._sync_to_supabase(model, limit, dry_run)

        if direction in ['from_supabase', 'both']:
            self._sync_from_supabase(model, conflict_strategy, limit, dry_run)

    def _sync_to_supabase(self, model, limit, dry_run):
        """Synchronize data from Django to Supabase."""
        model_name = model.__name__
        self.stdout.write(f"  Syncing {model_name} to Supabase...")

        try:
            # Check if the table exists by trying to get one record
            try:
                model.objects.first()
            except Exception as e:
                if 'relation' in str(e) and 'does not exist' in str(e):
                    self.stdout.write(
                        self.style.WARNING(
                            f"  Table for {model_name} does not exist in the database. "
                            f"Run migrations first."
                        )
                    )
                    return
                else:
                    # Some other error occurred, re-raise it
                    raise

            # Get the instances to synchronize
            queryset = model.objects.all()
            if limit:
                queryset = queryset[:limit]

            count = queryset.count()
            self.stdout.write(f"  Found {count} {model_name} instances to sync")

            if dry_run:
                self.stdout.write("  Dry run - no changes made")
                return

            # Perform the synchronization
            success_count = 0
            error_count = 0
            
            from mobilize.utils.supabase_sync import SupabaseSync
            
            for instance in queryset:
                try:
                    # Use the real Supabase client through SupabaseSync
                    result = SupabaseSync.sync_to_supabase(instance)
                    
                    if result:
                        success_count += 1
                        if hasattr(instance, 'id'):
                            self.stdout.write(f"    Synced {model_name} #{instance.id}")
                        else:
                            self.stdout.write(f"    Synced {model_name} instance")
                    else:
                        error_count += 1
                        self.stderr.write(
                            self.style.ERROR(f"    Failed to sync {model_name} #{instance.id} to Supabase")
                        )
                except Exception as e:
                    error_count += 1
                    self.stderr.write(
                        self.style.ERROR(f"    Error syncing {model_name} instance: {str(e)}")
                    )
            
            # Summary
            self.stdout.write(f"  Sync summary for {model_name}:")
            self.stdout.write(f"    Success: {success_count}")
            self.stdout.write(f"    Errors: {error_count}")
            
        except Exception as e:
            self.stderr.write(
                self.style.ERROR(f"  Error syncing {model_name} to Supabase: {str(e)}")
            )

    def _sync_person_from_supabase(self, conflict_strategy, limit, dry_run):
        import json
        """Special handler for Person model synchronization to handle user_id type mismatch."""
        model_class = Person
        model_name = model_class.__name__
        table_name = supabase.get_table_name(model_class)
        
        self.stdout.write(f"Synchronizing {model_name}...")
        
        try:
            # Fetch data from Supabase
            supabase_data = supabase.client.table(table_name).select('*').execute()
            records = supabase_data.data
            
            if limit:
                records = records[:limit]
            
            success_count = 0
            conflict_count = 0
            error_count = 0
            
            for record in records:
                try:
                    record_id = record.get('id')
                    if not record_id:
                        logger.error(f"Record without ID found in {table_name}")
                        error_count += 1
                        continue
                    
                    # First, create or update the Contact record
                    contact_data = {}
                    for field_name, field_value in record.items():
                        # Skip user_id as it's a string in Supabase but integer in Django
                        if field_name == 'user_id':
                            logger.info(f"Skipping user_id field for Person record {record_id}: {field_value} (string value)")
                            continue
                        
                        # Skip fields that are specific to Person model
                        if field_name not in ['id', 'created_at', 'updated_at']:
                            contact_data[field_name] = field_value
                    
                    # Check if Contact record exists
                    with connection.cursor() as cursor:
                        cursor.execute("SELECT id FROM contacts WHERE id = %s", [record_id])
                        contact_exists = cursor.fetchone() is not None
                    
                    if not contact_exists:
                        # Create Contact record with raw SQL
                        fields = ['id']
                        values = [record_id]
                        placeholders = ['%s']
                        
                        # Get the actual columns in the contacts table
                        with connection.cursor() as cursor:
                            cursor.execute("SELECT column_name, is_nullable FROM information_schema.columns WHERE table_name = 'contacts'")
                            contacts_columns = {row[0]: row[1] for row in cursor.fetchall()}
                        
                        # Add fields from contact_data
                        for field_name, field_value in contact_data.items():
                            if field_name in contacts_columns:
                                # Handle foreign keys
                                if field_name.endswith('_id') and field_value is not None:
                                    referenced_table = field_name[:-3] + 's'
                                    try:
                                        with connection.cursor() as check_cursor:
                                            check_cursor.execute(f"SELECT 1 FROM {referenced_table} WHERE id = %s", [field_value])
                                            if check_cursor.fetchone() is None:
                                                logger.warning(f"Foreign key constraint: {field_name}={field_value} not found in {referenced_table}, setting to NULL")
                                                field_value = None
                                    except Exception as e:
                                        logger.warning(f"Error checking foreign key {field_name}: {str(e)}")
                                        field_value = None
                                
                                fields.append(field_name)
                                values.append(field_value)
                                placeholders.append('%s')
                        
                        # Add created_at and updated_at
                        if 'created_at' in contacts_columns:
                            fields.append('created_at')
                            values.append('NOW()')
                            placeholders.append('%s')
                        
                        if 'updated_at' in contacts_columns:
                            fields.append('updated_at')
                            values.append('NOW()')
                            placeholders.append('%s')
                        
                        if not dry_run:
                            insert_sql = f"INSERT INTO contacts ({', '.join(fields)}) VALUES ({', '.join(placeholders)})"
                            with connection.cursor() as cursor:
                                cursor.execute(insert_sql, values)
                            logger.info(f"Created Contact record {record_id} using raw SQL")
                    
                    # Now handle the Person record with raw SQL
                    with connection.cursor() as cursor:
                        cursor.execute("SELECT id FROM people WHERE id = %s", [record_id])
                        person_exists = cursor.fetchone() is not None
                    
                    # Get the actual columns in the people table
                    with connection.cursor() as cursor:
                        cursor.execute("SELECT column_name, is_nullable FROM information_schema.columns WHERE table_name = 'people'")
                        people_columns = {row[0]: row[1] for row in cursor.fetchall()}
                    
                    if person_exists:
                        # Update Person record
                        update_fields = []
                        update_values = []
                        
                        for field_name, field_value in record.items():
                            if field_name != 'id' and field_name in people_columns:
                                # Skip user_id field
                                if field_name == 'user_id':
                                    continue
                                
                                # Handle foreign keys
                                if field_name.endswith('_id') and field_value is not None:
                                    referenced_table = field_name[:-3] + 's'
                                    try:
                                        with connection.cursor() as check_cursor:
                                            check_cursor.execute(f"SELECT 1 FROM {referenced_table} WHERE id = %s", [field_value])
                                            if check_cursor.fetchone() is None:
                                                logger.warning(f"Foreign key constraint: {field_name}={field_value} not found in {referenced_table}, setting to NULL")
                                                field_value = None
                                    except Exception as e:
                                        logger.warning(f"Error checking foreign key {field_name}: {str(e)}")
                                        field_value = None
                                
                                # Handle JSON fields
                                if field_name in ['tags', 'skills', 'interests', 'languages'] and field_value is not None:
                                    # Ensure proper JSON format
                                    try:
                                        if isinstance(field_value, str) and field_value.strip() == '':
                                            # Empty string should be converted to empty JSON array
                                            field_value = '[]'
                                        elif isinstance(field_value, str):
                                            # Validate it's proper JSON
                                            json.loads(field_value)
                                        else:
                                            # Convert to JSON string
                                            field_value = json.dumps(field_value or [])
                                    except Exception as e:
                                        logger.warning(f"Invalid JSON for field {field_name}, setting to empty array: {str(e)}")
                                        field_value = '[]'
                                
                                update_fields.append(f"{field_name} = %s")
                                update_values.append(field_value)
                        
                        # Add updated_at
                        if 'updated_at' in people_columns:
                            update_fields.append("updated_at = %s")
                            update_values.append('NOW()')
                        
                        if update_fields and not dry_run:
                            update_sql = f"UPDATE people SET {', '.join(update_fields)} WHERE id = %s"
                            update_values.append(record_id)
                            with connection.cursor() as cursor:
                                cursor.execute(update_sql, update_values)
                            logger.info(f"Updated Person record {record_id} using raw SQL")
                            success_count += 1
                        else:
                            logger.info(f"No fields to update for Person record {record_id}")
                            success_count += 1
                    else:
                        # Create Person record
                        fields = ['id']
                        values = [record_id]
                        placeholders = ['%s']
                        
                        for field_name, field_value in record.items():
                            if field_name != 'id' and field_name in people_columns:
                                # Skip user_id field
                                if field_name == 'user_id':
                                    continue
                                
                                # Handle foreign keys
                                if field_name.endswith('_id') and field_value is not None:
                                    referenced_table = field_name[:-3] + 's'
                                    try:
                                        with connection.cursor() as check_cursor:
                                            check_cursor.execute(f"SELECT 1 FROM {referenced_table} WHERE id = %s", [field_value])
                                            if check_cursor.fetchone() is None:
                                                logger.warning(f"Foreign key constraint: {field_name}={field_value} not found in {referenced_table}, setting to NULL")
                                                field_value = None
                                    except Exception as e:
                                        logger.warning(f"Error checking foreign key {field_name}: {str(e)}")
                                        field_value = None
                                
                                fields.append(field_name)
                                values.append(field_value)
                                placeholders.append('%s')
                        
                        # Add created_at and updated_at
                        if 'created_at' in people_columns:
                            fields.append('created_at')
                            values.append('NOW()')
                            placeholders.append('%s')
                        
                        if 'updated_at' in people_columns:
                            fields.append('updated_at')
                            values.append('NOW()')
                            placeholders.append('%s')
                        
                        if not dry_run:
                            insert_sql = f"INSERT INTO people ({', '.join(fields)}) VALUES ({', '.join(placeholders)})"
                            with connection.cursor() as cursor:
                                cursor.execute(insert_sql, values)
                            logger.info(f"Created Person record {record_id} using raw SQL")
                            success_count += 1
                
                except Exception as e:
                    logger.error(f"Error processing Person record: {str(e)}")
                    error_count += 1
            
            self.stdout.write(f"  Sync summary for {model_name}:")
            self.stdout.write(f"    Success: {success_count}")
            self.stdout.write(f"    Conflicts: {conflict_count}")
            self.stdout.write(f"    Errors: {error_count}")
            
            return success_count, conflict_count, error_count
        
        except Exception as e:
            logger.error(f"Error syncing {model_name} from Supabase: {str(e)}")
            self.stdout.write(
                self.style.ERROR(f"  Error syncing {model_name} from Supabase: {str(e)}")
            )
            return 0, 0, 0
    
    def _sync_from_supabase(self, model_class, conflict_strategy, limit, dry_run):
        """Synchronize data from Supabase to Django."""
        # Special handling for Person model due to user_id type mismatch
        from mobilize.contacts.models import Person
        if model_class == Person:
            return self._sync_person_from_supabase(conflict_strategy, limit, dry_run)
        model_name = model_class.__name__
        
        model_class = model_class
        table_name = supabase.get_table_name(model_class)
        
        # Special handling for Person and Church models which inherit from Contact
        from mobilize.contacts.models import Contact, Person
        from mobilize.churches.models import Church
        
        try:
            query = supabase.client.table(table_name).select('*')
            if limit:
                query = query.limit(limit)
            response = query.execute()
            supabase_data = response.data
            
            logger.info(f"Fetched {len(supabase_data)} records from Supabase table {table_name}")
        except Exception as e:
            logger.error(f"Error fetching data from Supabase table {table_name}: {str(e)}")
            return
        
        # Process each record
        success_count = 0
        conflict_count = 0
        error_count = 0
        
        for record in supabase_data:
            record_id = record.get('id')
            if not record_id:
                logger.error(f"Record in {table_name} is missing an ID, skipping")
                error_count += 1
                continue
            
            try:
                # For Person and Church models, we need special handling due to multi-table inheritance
                if model_class in [Person, Church]:
                    # First check if Contact record exists
                    try:
                        Contact.objects.get(id=record_id)
                        # Contact exists, no need to create it
                    except Contact.DoesNotExist:
                        # Create the Contact record first
                        contact_fields = [f.name for f in Contact._meta.fields if f.name != 'id']
                        contact_data = {k: v for k, v in record.items() if k in contact_fields}
                        contact_instance = Contact(id=record_id, **contact_data)
                        contact_instance.save()
                        logger.info(f"Created Contact record for {model_name} #{record_id}")
                    
                    # Now check if the model instance exists using raw SQL to avoid ORM issues
                    from django.db import connection
                    with connection.cursor() as cursor:
                        cursor.execute(f"SELECT COUNT(*) FROM {table_name} WHERE id = %s", [record_id])
                        instance_exists = cursor.fetchone()[0] > 0
                    
                    if instance_exists and conflict_strategy == 'skip':
                        logger.info(f"Record {record_id} already exists in Django, skipping")
                        conflict_count += 1
                        continue
                    
                    # If we're in dry run mode, just log what we would do
                    if dry_run:
                        logger.info(f"Would sync record {record_id} from Supabase to Django (dry run)")
                        success_count += 1
                        continue
                    
                    # For inherited models, we need to handle the creation/update manually
                    try:
                        if instance_exists:
                            # Update existing record using raw SQL - but first check which fields actually exist in the table
                            from django.db import connection
                            
                            # Get the actual columns in the table and their nullability
                            with connection.cursor() as cursor:
                                cursor.execute(f"SELECT column_name, is_nullable FROM information_schema.columns WHERE table_name = '{table_name}'")
                                columns_info = {row[0]: row[1] for row in cursor.fetchall()}
                            
                            logger.info(f"Columns in {table_name}: {columns_info}")
                            
                            update_fields = []
                            update_values = []
                            updated_columns = set()
                            
                            # First pass: add fields from the record
                            for field_name, field_value in record.items():
                                if field_name != 'id' and field_name in columns_info:
                                    # Handle foreign key fields
                                    if field_name.endswith('_id') and field_value is not None:
                                        # Check if the referenced record exists
                                        referenced_table = field_name[:-3] + 's'  # Convert 'office_id' to 'offices'
                                        try:
                                            with connection.cursor() as check_cursor:
                                                check_cursor.execute(f"SELECT 1 FROM {referenced_table} WHERE id = %s", [field_value])
                                                if check_cursor.fetchone() is None:
                                                    # Referenced record doesn't exist, set to NULL
                                                    logger.warning(f"Foreign key constraint: {field_name}={field_value} not found in {referenced_table}, setting to NULL")
                                                    field_value = None
                                        except Exception as e:
                                            logger.warning(f"Error checking foreign key {field_name}: {str(e)}")
                                            # If there's an error (e.g., table doesn't exist), set to NULL
                                            field_value = None
                                    
                                    update_fields.append(f"{field_name} = %s")
                                    update_values.append(field_value)
                                    updated_columns.add(field_name)
                            
                            # Second pass: check if any required fields are missing and need default values
                            for column_name, is_nullable in columns_info.items():
                                if is_nullable == 'NO' and column_name not in updated_columns and column_name != 'id':
                                    # Check if the field already has a value in the database
                                    with connection.cursor() as check_cursor:
                                        check_cursor.execute(f"SELECT {column_name} FROM {table_name} WHERE id = %s", [record_id])
                                        existing_value = check_cursor.fetchone()
                                        
                                    if existing_value and existing_value[0] is None:
                                        # Add default values for required fields
                                        if column_name == 'pipeline_stage':
                                            update_fields.append(f"{column_name} = %s")
                                            update_values.append('New')
                                        elif column_name == 'priority':
                                            update_fields.append(f"{column_name} = %s")
                                            update_values.append('Medium')
                                        elif column_name == 'updated_at':
                                            # Use parameter binding for consistency
                                            update_fields.append(f"{column_name} = %s")
                                            update_values.append('NOW()')
                                        elif column_name == 'name' and model_class == Church:
                                            update_fields.append(f"{column_name} = %s")
                                            update_values.append(f'Church {record_id}')
                            
                            if update_fields:
                                update_values.append(record_id)  # For the WHERE clause
                                with connection.cursor() as cursor:
                                    sql = f"UPDATE {table_name} SET {', '.join(update_fields)} WHERE id = %s"
                                    cursor.execute(sql, update_values)
                                logger.info(f"Updated {model_name} record {record_id} using raw SQL")
                                success_count += 1
                            else:
                                logger.info(f"No fields to update for {model_name} record {record_id}")
                                success_count += 1
                        else:
                            # Create new record using raw SQL - but first check which fields actually exist in the table
                            from django.db import connection
                            
                            # Get the actual columns in the table and their nullability
                            with connection.cursor() as cursor:
                                cursor.execute(f"SELECT column_name, is_nullable FROM information_schema.columns WHERE table_name = '{table_name}'")
                                columns_info = {row[0]: row[1] for row in cursor.fetchall()}
                            
                            logger.info(f"Columns in {table_name}: {columns_info}")
                            
                            fields = ['id']
                            values = [record_id]
                            placeholders = ['%s']
                            
                            # First pass: add fields from the record
                            for field_name, field_value in record.items():
                                if field_name != 'id' and field_name in columns_info:
                                    # Handle foreign key fields
                                    if field_name.endswith('_id') and field_value is not None:
                                        # Check if the referenced record exists
                                        referenced_table = field_name[:-3] + 's'  # Convert 'office_id' to 'offices'
                                        try:
                                            with connection.cursor() as check_cursor:
                                                check_cursor.execute(f"SELECT 1 FROM {referenced_table} WHERE id = %s", [field_value])
                                                if check_cursor.fetchone() is None:
                                                    # Referenced record doesn't exist, set to NULL
                                                    logger.warning(f"Foreign key constraint: {field_name}={field_value} not found in {referenced_table}, setting to NULL")
                                                    field_value = None
                                        except Exception as e:
                                            logger.warning(f"Error checking foreign key {field_name}: {str(e)}")
                                            # If there's an error (e.g., table doesn't exist), set to NULL
                                            field_value = None
                                    
                                    fields.append(field_name)
                                    values.append(field_value)
                                    placeholders.append('%s')
                            
                            # Second pass: add default values for required fields that are missing
                            for column_name, is_nullable in columns_info.items():
                                if is_nullable == 'NO' and column_name not in fields:
                                    # Add default values for required fields
                                    if column_name == 'pipeline_stage':
                                        fields.append(column_name)
                                        values.append('New')
                                        placeholders.append('%s')
                                    elif column_name == 'priority':
                                        fields.append(column_name)
                                        values.append('Medium')
                                        placeholders.append('%s')
                                    elif column_name == 'created_at' or column_name == 'updated_at':
                                        fields.append(column_name)
                                        values.append('NOW()')
                                        placeholders.append('%s')
                                    elif column_name == 'name' and model_class == Church:
                                        fields.append(column_name)
                                        values.append(f'Church {record_id}')
                                        placeholders.append('%s')
                            
                            with connection.cursor() as cursor:
                                sql = f"INSERT INTO {table_name} ({', '.join(fields)}) VALUES ({', '.join(placeholders)})"
                                cursor.execute(sql, values)
                            logger.info(f"Created {model_name} record {record_id} using raw SQL")
                            success_count += 1
                    except Exception as sql_error:
                        logger.error(f"SQL error for {model_name} record {record_id}: {str(sql_error)}")
                        error_count += 1
                else:
                    # Standard handling for non-inherited models
                    try:
                        # Check if the record already exists in Django
                        instance_exists = model_class.objects.filter(id=record_id).exists()
                        
                        if instance_exists and conflict_strategy == 'skip':
                            logger.info(f"Record {record_id} already exists in Django, skipping")
                            conflict_count += 1
                            continue
                        
                        # If we're in dry run mode, just log what we would do
                        if dry_run:
                            logger.info(f"Would sync record {record_id} from Supabase to Django (dry run)")
                            success_count += 1
                            continue
                        
                        # Sync the record to Django
                        django_instance = SupabaseSync.sync_from_supabase(record, model_class)
                        if django_instance:
                            success_count += 1
                        else:
                            error_count += 1
                    except Exception as e:
                        logger.error(f"Error processing {model_name} record: {str(e)}")
                        error_count += 1
            except Exception as e:
                logger.error(f"Error processing {model_name} record: {str(e)}")
                error_count += 1
        
        # Summary
        self.stdout.write(f"  Sync summary for {model_name}:")
        self.stdout.write(f"    Success: {success_count}")
        self.stdout.write(f"    Conflicts: {conflict_count}")
        self.stdout.write(f"    Errors: {error_count}")
        
        return success_count, conflict_count, error_count
